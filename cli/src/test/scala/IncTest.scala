import org.specs._
import scalaxb.compiler.{Verbose}

object IncTest extends SpecBase {
  val module = new scalaxb.compiler.xsd2.Driver // with Verbose
  // val module = new scalaxb.compiler.xsd.Driver // with Verbose

  lazy val generated = module.processString(schemaString, "general")
  lazy val entitySource = generated(0)

  "the generated entity source" should {
    "start with // Generated by" >> {
      println(entitySource)
      entitySource must startWith("// Generated by")
    }

    "include top-level complex type as a case class" >> {
      "named similarly" >> {
        entitySource must include("case class Address(")
      }

      "xs:string parameters map as String" >> {
        entitySource must find(
          """case class Address\(street: String,\s*
            |\s*city: String\)""".stripMargin)
      }

      "complex type parameters map to corresponding class or trait" >> {
        entitySource must include("case class SingularComplexTypeTest(person1: Person")
      }

    } // complexType

    "include top-level simple type with enumeration" >> {
      "as trait" >> {
        entitySource must include("trait MilkType")
      }

      "each enumerations represented as case object" >> {
        entitySource must include("case object WHOLE")
      }
    }

    "include top-level element as a case class" >> {
      entitySource must include("case class TopLevelElementTest(")
    }

    "include inner element as a case class" >> {
      entitySource must include("case class Item(")
    }
  } // entity
}
