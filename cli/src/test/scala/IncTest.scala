import org.specs._
import scalaxb.compiler.{Verbose}

object IncTest extends SpecBase {
  val module = new scalaxb.compiler.xsd2.Driver // with Verbose
  // val module = new scalaxb.compiler.xsd.Driver // with Verbose

  lazy val generated = module.processString(schemaString, "general")
  lazy val entitySource = generated(0)

  "the generated entity source" should {
    "start with // Generated by" >> {
      println(entitySource)
      entitySource must startWith("// Generated by")
    }
  } // entity

  "top-level complex types" should {
    "generate a case class named similarly" >> {
      entitySource must include("case class Address(")
    }
  } // complexType


  "top-level simple types with enumeration" should {
    "generate a trait named similarly" >> {
      entitySource must include("trait MilkType")
    }

    "each enumerations represented as case object" >> {
      entitySource must include("case object WHOLE")
    }
  } // enumeration

  "top-level elements with a local complex type" should {
    "generate a case class named similarly" >> {
      entitySource must include("case class TopLevelElementTest(")
    }
  } // element

  "local elements with a local complex type" should {
    "generate a case class named similarly" >> {
      entitySource must include("case class Item(")
    }
  } // local element

  "the generated case classes" should {
    "map xs:string parameters to String" >> {
      entitySource must find(
        """case class Address\(street: String,\s*
          |\s*city: String\)""".stripMargin)
    }

    "map complex type parameters map to the corresponding class or trait" >> {
      entitySource must include("case class SingularComplexTypeTest(person1: Person")
    }

    "map simple type restriction of built-in type map to the built-in type" >> {
      entitySource must include("case class SimpleTypeTest(quantity: BigInt")
    }
  } // generated case classes
}
